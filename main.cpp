#include<iostream>
#include<bits/stdc++.h>
#include<vector>
#define MAX_MCS_INDEX 28 // MCS as higher as signal strength is better
#define MAX_RB 100
using namespace std;


int TBSizeArr[MAX_MCS_INDEX][MAX_RB] = //CẦN CẢI THIỆN INT
{
    {
    2,    4,    7,    11,    15,    19,    22,    26,    28,    32,
    36,    41,    43,    47,    49,    53,    57,    61,    63,    67,
    71,    75,    77,    81,    85,    89,    93,    97,    97,    101,
    105,    109,    113,    117,    121,    125,    129,    129,    133,    137,
    141,    145,    149,    153,    157,    157,    161,    165,    169,    173,
    177,    177,    185,    185,    193,    193,    201,    201,    201,    209,
    209,    217,    217,    225,    225,    225,    233,    233,    241,    241,
    249,    249,    253,    261,    261,    261,    269,    269,    277,    277,
    285,    285,    285,    293,    293,    301,    301,    309,    309,    317,
    317,    317,    325,    325,    333,    333,    341,    341,    341,    349
    }, /* 01 */
    {
    3,    7,    11,    18,    22,    26,    28,    32,    41,    43,
    47,    53,    57,    61,    65,    71,    75,    79,    85,    89,
    93,    97,    101,    109,    113,    117,    121,    125,    129,    133,
    141,    145,    149,    153,    157,    161,    169,    173,    177,    177,
    185,    193,    193,    201,    201,    209,    217,    217,    225,    225,
    233,    233,    241,    249,    249,    253,    261,    261,    269,    269,
    277,    285,    285,    293,    293,    301,    309,    309,    317,    317,
    325,    325,    333,    341,    341,    349,    349,    357,    357,    357,
    373,    373,    373,    389,    389,    389,    405,    405,    405,    405,
    421,    421,    421,    437,    437,    437,    437,    453,    453,    453
    }, /* 02 */
    {
    4,    9,    18,    22,    26,    32,    37,    41,    47,    53,
    59,    65,    71,    77,    81,    87,    93,    97,    105,    109,
    117,    121,    125,    133,    137,    145,    149,    157,    161,    165,
    173,    177,    185,    193,    193,    201,    209,    209,    217,    225,
    225,    233,    241,    249,    253,    261,    261,    269,    277,    277,
    285,    293,    293,    301,    309,    317,    317,    325,    333,    333,
    341,    349,    357,    357,    357,    373,    373,    389,    389,    389,
    405,    405,    405,    421,    421,    421,    437,    437,    437,    453,
    453,    453,    469,    469,    485,    485,    485,    501,    501,    501,
    517,    517,    517,    533,    533,    533,    549,    549,    549,    573
    }, /* 03 */
    {
    5,    13,    22,    26,    32,    41,    49,    55,    63,    71,
    77,    85,    93,    101,    109,    113,    121,    129,    137,    145,
    153,    157,    165,    173,    177,    185,    193,    201,    209,    217,
    225,    233,    241,    249,    253,    261,    269,    277,    285,    293,
    301,    309,    317,    317,    325,    333,    341,    349,    357,    357,
    373,    373,    389,    389,    405,    405,    421,    421,    437,    437,
    453,    453,    453,    469,    469,    485,    485,    501,    501,    517,
    517,    533,    533,    549,    549,    549,    573,    573,    573,    597,
    597,    597,    597,    621,    621,    621,    645,    645,    645,    669,
    669,    669,    669,    693,    693,    693,    717,    717,    717,    717
    }, /* 04 */
    {
    7,    15,    26,    32,    41,    51,    61,    69,    79,    87,
    97,    105,    113,    125,    133,    141,    149,    161,    169,    177,
    185,    193,    201,    217,    225,    233,    241,    249,    261,    269,
    277,    285,    293,    301,    309,    325,    333,    341,    349,    357,
    373,    373,    389,    389,    405,    405,    421,    437,    437,    453,
    453,    469,    469,    485,    501,    501,    517,    517,    533,    533,
    549,    549,    573,    573,    573,    597,    597,    621,    621,    621,
    645,    645,    645,    669,    669,    693,    693,    693,    717,    717,
    717,    749,    749,    749,    749,    775,    775,    775,    807,    807,
    807,    807,    839,    839,    839,    871,    871,    871,    871,    903
    }, /* 05 */
    {
    9,    18,    28,    41,    53,    63,    75,    85,    97,    109,
    121,    129,    141,    153,    165,    173,    185,    193,    209,    217,
    233,    241,    253,    261,    277,    285,    293,    309,    317,    333,
    341,    349,    357,    373,    389,    389,    405,    421,    437,    437,
    453,    469,    469,    485,    501,    501,    517,    533,    549,    549,
    573,    573,    597,    597,    597,    621,    621,    645,    645,    669,
    669,    693,    693,    717,    717,    717,    749,    749,    749,    775,
    775,    775,    807,    807,    839,    839,    839,    871,    871,    871,
    903,    903,    903,    935,    935,    935,    967,    967,    967,    999,
    999,    999,    1031,    1031,    1031,    1063,    1063,    1095,    1095,    1095
    }, /* 06 */
    {
    41,    22,    32,    49,    63,    75,    89,    101,    117,    129,
    141,    153,    169,    185,    193,    209,    217,    233,    249,    261,
    277,    285,    301,    309,    325,    341,    349,    373,    373,    389,
    405,    421,    437,    437,    453,    469,    485,    501,    517,    517,
    533,    549,    573,    573,    597,    597,    621,    621,    645,    645,
    669,    669,    693,    717,    717,    749,    749,    749,    775,    775,
    807,    807,    807,    839,    839,    871,    871,    871,    903,    903,
    935,    935,    967,    967,    967,    999,    999,    1031,    1031,    1031,
    1063,    1063,    1095,    1095,    1095,    1143,    1143,    1143,    1143,    1191,
    1191,    1191,    1191,    1239,    1239,    1239,    1287,    1287,    1287,    1287
    }, /* 07 */
    {
    13,    28,    41,    59,    73,    89,    105,    121,    137,    153,
    165,    185,    201,    209,    225,    241,    261,    277,    293,    309,
    317,    333,    349,    373,    389,    405,    421,    421,    437,    453,
    469,    485,    501,    517,    533,    549,    573,    573,    597,    621,
    621,    645,    669,    669,    693,    717,    717,    749,    749,    775,
    775,    807,    807,    839,    839,    839,    871,    871,    903,    903,
    935,    935,    967,    967,    999,    999,    1031,    1031,    1063,    1063,
    1095,    1095,    1095,    1143,    1143,    1143,    1191,    1191,    1191,    1239,
    1239,    1239,    1287,    1287,    1287,    1335,    1335,    1335,    1383,    1383,
    1383,    1431,    1431,    1431,    1431,    1479,    1479,    1479,    1527,    1527
    }, /* 08 */
    {
    15,    32,    49,    67,    85,    101,    121,    137,    157,    173,
    193,    209,    225,    241,    261,    277,    293,    317,    333,    349,
    373,    389,    405,    421,    437,    453,    469,    485,    501,    533,
    549,    573,    573,    597,    621,    621,    645,    669,    693,    693,
    717,    749,    749,    775,    775,    807,    807,    839,    871,    871,
    903,    903,    935,    935,    967,    967,    999,    999,    1031,    1063,
    1063,    1095,    1095,    1143,    1143,    1143,    1191,    1191,    1191,    1239,
    1239,    1239,    1287,    1287,    1335,    1335,    1335,    1383,    1383,    1383,
    1431,    1431,    1431,    1479,    1479,    1527,    1527,    1527,    1572,    1572,
    1572,    1620,    1620,    1620,    1692,    1692,    1692,    1692,    1764,    1764
    }, /* 09 */
    {
    17,    37,    57,    77,    97,    117,    137,    157,    177,    193,
    217,    233,    253,    277,    293,    317,    333,    357,    373,    389,
    421,    437,    453,    469,    501,    517,    533,    549,    573,    597,
    621,    645,    645,    669,    693,    717,    717,    749,    775,    775,
    807,    839,    839,    871,    871,    903,    935,    935,    967,    999,
    999,    1031,    1031,    1063,    1095,    1095,    1143,    1143,    1143,    1191,
    1191,    1239,    1239,    1287,    1287,    1287,    1335,    1335,    1383,    1383,
    1383,    1431,    1431,    1479,    1479,    1479,    1527,    1527,    1572,    1572,
    1620,    1620,    1620,    1692,    1692,    1692,    1692,    1764,    1764,    1764,
    1764,    1836,    1836,    1836,    1908,    1908,    1908,    1908,    1980,    1980
    }, /* 10 */
    {
    18,    41,    63,    85,    109,    129,    153,    173,    193,    217,
    241,    261,    285,    309,    333,    349,    373,    389,    421,    437,
    469,    485,    501,    533,    549,    573,    597,    621,    645,    669,
    693,    717,    717,    749,    775,    775,    807,    839,    839,    871,
    903,    935,    935,    967,    999,    999,    1031,    1063,    1063,    1095,
    1143,    1143,    1143,    1191,    1191,    1239,    1239,    1287,    1287,    1335,
    1335,    1383,    1383,    1431,    1431,    1431,    1479,    1479,    1527,    1527,
    1572,    1572,    1620,    1620,    1620,    1692,    1692,    1692,    1764,    1764,
    1764,    1836,    1836,    1836,    1836,    1908,    1908,    1908,    1980,    1980,
    1980,    2052,    2052,    2052,    2124,    2124,    2124,    2124,    2196,    2196
    }, /* 11 */
    {
    22,    47,    73,    97,    125,    149,    173,    201,    225,    253,
    277,    301,    325,    349,    373,    405,    437,    453,    485,    501,
    533,    549,    573,    597,    621,    669,    693,    717,    749,    749,
    775,    807,    839,    871,    871,    903,    935,    967,    967,    999,
    1031,    1063,    1095,    1095,    1143,    1143,    1191,    1191,    1239,    1239,
    1287,    1335,    1335,    1383,    1383,    1431,    1431,    1479,    1479,    1527,
    1527,    1572,    1572,    1620,    1620,    1692,    1692,    1692,    1764,    1764,
    1764,    1836,    1836,    1836,    1908,    1908,    1980,    1980,    1980,    2052,
    2052,    2052,    2124,    2124,    2124,    2196,    2196,    2196,    2292,    2292,
    2292,    2292,    2385,    2385,    2385,    2385,    2481,    2481,    2481,    2481
    }, /* 12 */
    {
    26,    55,    85,    113,    141,    169,    201,    225,    253,    285,
    309,    341,    373,    405,    421,    453,    485,    517,    549,    573,
    597,    621,    669,    693,    717,    749,    775,    807,    839,    839,
    871,    903,    935,    967,    999,    1031,    1063,    1095,    1095,    1143,
    1191,    1191,    1239,    1239,    1287,    1335,    1335,    1383,    1383,    1431,
    1479,    1479,    1527,    1527,    1572,    1572,    1620,    1620,    1692,    1692,
    1764,    1764,    1764,    1836,    1836,    1908,    1908,    1908,    1980,    1980,
    2052,    2052,    2052,    2124,    2124,    2196,    2196,    2196,    2292,    2292,
    2292,    2385,    2385,    2385,    2385,    2481,    2481,    2481,    2577,    2577,
    2577,    2673,    2673,    2673,    2673,    2769,    2769,    2769,    2865,    2865
    }, /* 13 */
    {
    28,    61,    93,    125,    157,    193,    225,    253,    285,    317,
    357,    389,    421,    453,    485,    517,    549,    573,    621,    645,
    669,    717,    749,    775,    807,    839,    871,    903,    935,    967,
    999,    1031,    1063,    1095,    1143,    1143,    1191,    1239,    1239,    1287,
    1335,    1335,    1383,    1431,    1431,    1479,    1527,    1527,    1572,    1620,
    1620,    1692,    1692,    1764,    1764,    1836,    1836,    1836,    1908,    1908,
    1980,    1980,    2052,    2052,    2124,    2124,    2124,    2196,    2196,    2292,
    2292,    2292,    2385,    2385,    2385,    2481,    2481,    2481,    2577,    2577,
    2577,    2673,    2673,    2673,    2769,    2769,    2769,    2865,    2865,    2865,
    2961,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3182
    }, /* 14 */
    {
    32,    69,    105,    141,    177,    217,    249,    285,    325,    357,
    389,    437,    469,    501,    533,    573,    621,    645,    693,    717,
    749,    775,    807,    871,    903,    935,    967,    999,    1031,    1063,
    1095,    1143,    1191,    1239,    1239,    1287,    1335,    1383,    1383,    1431,
    1479,    1527,    1527,    1572,    1620,    1620,    1692,    1692,    1764,    1764,
    1836,    1836,    1908,    1908,    1980,    1980,    2052,    2052,    2124,    2124,
    2196,    2196,    2292,    2292,    2292,    2385,    2385,    2481,    2481,    2481,
    2577,    2577,    2577,    2673,    2673,    2769,    2769,    2769,    2865,    2865,
    2865,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3182,
    3302,    3302,    3302,    3422,    3422,    3422,    3542,    3542,    3542,    3542
    }, /* 15 */
    {
    35,    75,    113,    153,    193,    225,    269,    309,    341,    389,
    421,    453,    501,    533,    573,    621,    645,    693,    717,    775,
    807,    839,    871,    903,    967,    999,    1031,    1063,    1095,    1143,
    1191,    1239,    1287,    1287,    1335,    1383,    1431,    1479,    1479,    1527,
    1572,    1620,    1620,    1692,    1692,    1764,    1836,    1836,    1908,    1908,
    1980,    1980,    2052,    2052,    2124,    2124,    2196,    2196,    2292,    2292,
    2292,    2385,    2385,    2481,    2481,    2577,    2577,    2577,    2673,    2673,
    2769,    2769,    2769,    2865,    2865,    2961,    2961,    2961,    3062,    3062,
    3062,    3182,    3182,    3182,    3302,    3302,    3302,    3422,    3422,    3422,
    3542,    3542,    3542,    3662,    3662,    3662,    3662,    3822,    3822,    3822
    }, /* 16 */
    {
    41,    79,    121,    161,    201,    241,    285,    325,    373,    405,
    453,    485,    533,    573,    621,    645,    693,    749,    775,    807,
    839,    903,    935,    967,    999,    1063,    1095,    1143,    1191,    1239,
    1239,    1287,    1335,    1383,    1431,    1479,    1527,    1527,    1572,    1620,
    1692,    1692,    1764,    1764,    1836,    1836,    1908,    1980,    1980,    2052,
    2052,    2124,    2124,    2196,    2196,    2292,    2292,    2385,    2385,    2481,
    2481,    2481,    2577,    2577,    2673,    2673,    2769,    2769,    2769,    2865,
    2865,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3302,
    3302,    3302,    3422,    3422,    3422,    3542,    3542,    3542,    3662,    3662,
    3662,    3822,    3822,    3822,    3822,    3963,    3963,    3963,    3963,    4107
    }, /* 17 */
    {
    42,    87,    133,    177,    225,    269,    317,    357,    405,    453,
    501,    549,    597,    645,    669,    717,    775,    807,    839,    903,
    935,    999,    1031,    1095,    1143,    1191,    1239,    1287,    1287,    1335,
    1383,    1431,    1479,    1527,    1572,    1620,    1692,    1692,    1764,    1836,
    1836,    1908,    1908,    1980,    2052,    2052,    2124,    2196,    2196,    2292,
    2292,    2385,    2385,    2481,    2481,    2577,    2577,    2577,    2673,    2673,
    2769,    2769,    2865,    2865,    2961,    2961,    3062,    3062,    3062,    3182,
    3182,    3302,    3302,    3302,    3422,    3422,    3422,    3542,    3542,    3662,
    3662,    3662,    3822,    3822,    3822,    3822,    3963,    3963,    3963,    4107,
    4107,    4107,    4251,    4251,    4251,    4395,    4395,    4395,    4395,    4587
    }, /* 18 */
    {
    47,    97,    145,    193,    249,    293,    349,    389,    453,    501,
    549,    597,    645,    693,    749,    775,    839,    903,    935,    999,
    1031,    1095,    1143,    1191,    1239,    1287,    1335,    1383,    1431,    1479,
    1527,    1572,    1620,    1692,    1764,    1764,    1836,    1908,    1908,    1980,
    2052,    2052,    2124,    2196,    2196,    2292,    2292,    2385,    2385,    2481,
    2481,    2577,    2673,    2673,    2769,    2769,    2865,    2865,    2961,    2961,
    3062,    3062,    3062,    3182,    3182,    3302,    3302,    3422,    3422,    3422,
    3542,    3542,    3662,    3662,    3662,    3822,    3822,    3822,    3963,    3963,
    3963,    4107,    4107,    4107,    4251,    4251,    4251,    4395,    4395,    4395,
    4587,    4587,    4587,    4736,    4736,    4736,    4736,    4904,    4904,    4904
    }, /* 19 */
    {
    51,    105,    161,    217,    269,    325,    373,    437,    485,    533,
    597,    645,    693,    749,    807,    871,    903,    967,    1031,    1063,
    1143,    1191,    1239,    1287,    1335,    1383,    1431,    1527,    1572,    1620,
    1692,    1692,    1764,    1836,    1908,    1908,    1980,    2052,    2124,    2124,
    2196,    2292,    2292,    2385,    2385,    2481,    2577,    2577,    2673,    2673,
    2769,    2769,    2865,    2865,    2961,    3062,    3062,    3182,    3182,    3182,
    3302,    3302,    3422,    3422,    3542,    3542,    3662,    3662,    3662,    3822,
    3822,    3822,    3963,    3963,    4107,    4107,    4107,    4251,    4251,    4251,
    4395,    4395,    4395,    4587,    4587,    4587,    4736,    4736,    4736,    4904,
    4904,    4904,    5072,    5072,    5072,    5072,    5296,    5296,    5296,    5477
    }, /* 20 */
    {
    55,    113,    173,    233,    293,    349,    405,    469,    517,    573,
    645,    693,    749,    807,    871,    935,    999,    1031,    1095,    1143,
    1239,    1287,    1335,    1383,    1431,    1527,    1572,    1620,    1692,    1764,
    1836,    1836,    1908,    1980,    2052,    2124,    2124,    2196,    2292,    2292,
    2385,    2481,    2481,    2577,    2577,    2673,    2769,    2769,    2865,    2865,
    2961,    3062,    3062,    3182,    3182,    3302,    3302,    3422,    3422,    3542,
    3542,    3662,    3662,    3662,    3822,    3822,    3963,    3963,    3963,    4107,
    4107,    4251,    4251,    4251,    4395,    4395,    4395,    4587,    4587,    4587,
    4736,    4736,    4904,    4904,    4904,    5072,    5072,    5072,    5296,    5296,
    5296,    5296,    5477,    5477,    5477,    5669,    5669,    5669,    5861,    5861
    }, /* 21 */
    {
    61,    125,    185,    249,    309,    373,    437,    501,    573,    621,
    693,    749,    807,    871,    935,    999,    1063,    1143,    1191,    1239,
    1335,    1383,    1431,    1527,    1572,    1620,    1692,    1764,    1836,    1908,
    1980,    1980,    2052,    2124,    2196,    2292,    2292,    2385,    2481,    2481,
    2577,    2673,    2673,    2769,    2865,    2865,    2961,    3062,    3062,    3182,
    3182,    3302,    3302,    3422,    3422,    3542,    3542,    3662,    3662,    3822,
    3822,    3963,    3963,    3963,    4107,    4107,    4251,    4251,    4395,    4395,
    4395,    4587,    4587,    4587,    4736,    4736,    4904,    4904,    4904,    5072,
    5072,    5072,    5296,    5296,    5296,    5477,    5477,    5477,    5669,    5669,
    5669,    5861,    5861,    5861,    5861,    6117,    6117,    6117,    6117,    6378
    }, /* 22 */
    {
    65,    133,    201,    269,    333,    405,    469,    533,    597,    669,
    749,    807,    871,    935,    999,    1063,    1143,    1191,    1287,    1335,
    1431,    1479,    1572,    1620,    1692,    1764,    1836,    1908,    1980,    2052,
    2124,    2124,    2196,    2292,    2385,    2385,    2481,    2577,    2673,    2673,
    2769,    2865,    2865,    2961,    3062,    3062,    3182,    3182,    3302,    3422,
    3422,    3542,    3542,    3662,    3662,    3822,    3822,    3963,    3963,    4107,
    4107,    4251,    4251,    4251,    4395,    4395,    4587,    4587,    4587,    4736,
    4736,    4904,    4904,    5072,    5072,    5072,    5296,    5296,    5296,    5477,
    5477,    5477,    5669,    5669,    5669,    5861,    5861,    5861,    6117,    6117,
    6117,    6117,    6378,    6378,    6378,    6378,    6594,    6594,    6594,    6882
    }, /* 23 */
    {
    69,    141,    217,    285,    357,    437,    501,    573,    645,    717,
    775,    871,    935,    999,    1063,    1143,    1239,    1287,    1383,    1431,
    1527,    1572,    1620,    1692,    1764,    1836,    1908,    1980,    2052,    2124,
    2196,    2292,    2385,    2481,    2481,    2577,    2673,    2769,    2769,    2865,
    2961,    3062,    3062,    3182,    3182,    3302,    3422,    3422,    3542,    3542,
    3662,    3662,    3822,    3822,    3963,    3963,    4107,    4107,    4251,    4251,
    4395,    4395,    4587,    4587,    4736,    4736,    4736,    4904,    4904,    5072,
    5072,    5072,    5296,    5296,    5477,    5477,    5477,    5669,    5669,    5669,
    5861,    5861,    5861,    6117,    6117,    6117,    6378,    6378,    6378,    6378,
    6594,    6594,    6594,    6882,    6882,    6882,    6882,    7167,    7167,    7167
    }, /* 24 */
    {
    73,    149,    225,    301,    373,    453,    533,    621,    693,    749,
    839,    903,    999,    1063,    1143,    1239,    1287,    1383,    1431,    1527,
    1620,    1692,    1764,    1836,    1908,    1980,    2052,    2124,    2196,    2292,
    2385,    2481,    2481,    2577,    2673,    2769,    2865,    2865,    2961,    3062,
    3182,    3182,    3302,    3302,    3422,    3542,    3542,    3662,    3662,    3822,
    3963,    3963,    4107,    4107,    4251,    4251,    4395,    4395,    4587,    4587,
    4587,    4736,    4736,    4904,    4904,    5072,    5072,    5296,    5296,    5296,
    5477,    5477,    5669,    5669,    5669,    5861,    5861,    5861,    6117,    6117,
    6117,    6378,    6378,    6378,    6594,    6594,    6594,    6594,    6882,    6882,
    6882,    7167,    7167,    7167,    7167,    7407,    7407,    7407,    7708,    7708
    },/* 25 */
    {
    77,    157,    233,    317,    389,    469,    549,    645,    717,    775,
    871,    935,    1031,    1095,    1191,    1287,    1335,    1431,    1527,    1572,
    1692,    1764,    1836,    1908,    1980,    2052,    2124,    2196,    2292,    2385,
    2481,    2577,    2577,    2673,    2769,    2865,    2961,    3062,    3062,    3182,
    3302,    3302,    3422,    3542,    3542,    3662,    3662,    3822,    3963,    3963,
    4107,    4107,    4251,    4251,    4395,    4395,    4587,    4587,    4736,    4736,
    4904,    4904,    5072,    5072,    5072,    5296,    5296,    5477,    5477,    5477,
    5669,    5669,    5861,    5861,    5861,    6117,    6117,    6117,    6378,    6378,
    6378,    6594,    6594,    6594,    6882,    6882,    6882,    6882,    7167,    7167,
    7167,    7407,    7407,    7407,    7708,    7708,    7708,    7708,    7972,    7972
    },/* 26 */
    {
    89,    185,    277,    373,    469,    549,    645,    749,    839,    935,
    1031,    1095,    1191,    1287,    1383,    1479,    1572,    1692,    1764,    1836,
    1908,    2052,    2124,    2196,    2292,    2385,    2481,    2577,    2673,    2769,
    2865,    2961,    3062,    3182,    3182,    3302,    3422,    3542,    3662,    3662,
    3822,    3822,    3963,    4107,    4107,    4251,    4395,    4395,    4587,    4587,
    4736,    4736,    4904,    5072,    5072,    5072,    5296,    5296,    5477,    5477,
    5669,    5669,    5861,    5861,    6117,    6117,    6117,    6378,    6378,    6594,
    6594,    6594,    6882,    6882,    6882,    6882,    7167,    7167,    7167,    7407,
    7407,    7407,    7708,    7708,    7708,    7972,    7972,    7972,    8324,    8324,
    8324,    8601,    8601,    8601,    8889,    8889,    8889,    9214,    9214,    9422
    },/* 27 */
    {
    81,     165,     249,       333,    421,    501,    573,    669,    749,    839,
    903,    999,    1063,       1143,   1239,   1335,   1431,   1479,   1572,   1620,
    1764,   1836,   1908,       1980,   2052,   2124,   2196,   2292,   2385,   2481,
    2577,   2673,   2769,       2865,   2865,   2961,   3062,   3182,   3182,   3302,
    3422,   3422,   3542,       3662,   3662,   3822,   3963,   3963,   4107,   4107,
    4251,   4251,   4395,       4395,   4587,   4587,   4736,   4736,   4904,   4904,
    5072,   5072,   5296,       5296,   5477,   5477,   5477,   5669,   5669,   5861,
    5861,   5861,   6117,       6117,   6117,   6378,   6378,   6378,   6594,   6594,
    6594,   6882,   6882,       6882,   7167,   7167,   7167,   7407,   7407,   7407
    }/* 28 */
};

struct UEInformation{
    int MCS;
    float AveMCS;
    int ResourceBlock;
    int scheduleTimes;
    int Throughput;
    int TTIDelay;
    bool IsScheduled;
};

int updateMCS(){
    int MCS = rand() % 27;
    return MCS;
}

/*------------------------------------------------ROUND ROBIN-----------------------------------------------*/
// RoundRobin: số RB chia đều, số UE được lập lịch được chia đều
void RoundRobin(int total_TTI, int numOfUE, int max_UE_in_TTI){
    int countTTI = 0;
    struct UEInformation UE[20];
    for(int i=0;i<numOfUE;i++){ /*CẤP MCS CHO TỪNG UE*/
            UE[i].MCS = updateMCS();
    }
    for(int i=0;i<numOfUE;i++){
        UE[i].scheduleTimes = 0;
        UE[i].Throughput = 0;
        UE[i].ResourceBlock = 0;
        UE[i].TTIDelay = 0;
        UE[i].IsScheduled = false;
    }
    vector<int> TTI[12];
    int TotalTTI[12] = {0};
    while(countTTI < total_TTI){ //10000 TTI THÌ DỪNG
        int i = 0; // SAU KHI CHẠY HẾT 12 UE SẼ RESET BIẾN CHỈ SỐ i = 0
        while(i<numOfUE){ // DUYỆT VÒNG LẶP VỚI  i < 12
            int cnt = 0;
            while(cnt<4){ //MAX UE IN TTI = 4
                //for(int i=0;i<numOfUE;i++){ /*CẤP MCS CHO TỪNG UE*/
                //    UE[i].MCS = updateMCS();
                //}
                UE[i].Throughput += TBSizeArr[UE[i].MCS][24];
                UE[i].scheduleTimes++;
                UE[i].ResourceBlock += 25;
                UE[i].AveMCS += UE[i].MCS;
                UE[i].IsScheduled = true;
                i++;//I = 1
                cnt++;// CNT = 1
            }
            // SAU KHI CHAY XONG 1 TTI THÌ CHẠY ĐẾN PHẦN NÀY
            for(int i=0;i<numOfUE;i++){
                if(UE[i].IsScheduled == false){
                    UE[i].TTIDelay++; // NẾU EU CHƯA ĐƯỢC LẬP LỊCH THÌ TTI DELAY TĂNG 1 ĐƠN VỊ
                }else{
                    UE[i].TTIDelay = 0; // NẾU EU CHƯA ĐƯỢC LẬP LỊCH THÌ TTI DELAY VỀ 0
                    UE[i].IsScheduled = false;
                }
            }

            for(int i=0;i<numOfUE;i++){
                TTI[i].push_back(UE[i].TTIDelay);
                TotalTTI[i] += UE[i].TTIDelay;
            }


            countTTI++;// COUNTTTI = 1
            if(countTTI==total_TTI){
                break;
            }
        }
    }

    float AverageThroughputofCell = 0;
    cout << "----------------------"  << " ROUND ROBIN " << "---------------------" << endl;
    for(int i=0;i<numOfUE;i++){
        float AveThrougput =  float(UE[i].Throughput)*8/(float(UE[i].scheduleTimes)*0.001*1000000);
        AverageThroughputofCell += AveThrougput;
        cout << "------------------" << " UE " << i << " ------------------" << endl;
        cout << "Average MCS of UE: " << float(UE[i].AveMCS)/float(UE[i].scheduleTimes) << endl;
        cout << "Schedule Times of UE is: " << UE[i].scheduleTimes << " Times" <<  endl;
        cout << "Number of average Resource Block during 10000 TTI is: " << float(UE[i].ResourceBlock)/float(total_TTI) << " RBs" << endl;
        cout << "Average Throughput of UE is: " << AveThrougput << " Mbps" << endl;
        cout << "Average Schedule Delay of UE is: " << float(TotalTTI[i])/float(total_TTI) << " TTIs" << endl;
        cout << "Max Schedule Delay of UE is: " << *max_element(TTI[i].begin(), TTI[i].end()) << " TTIs" << endl;
        cout << endl;
    }
    cout << "-----------------------------------------------------------------------" << endl;
    cout << "Average Througput of Cell is: " << AverageThroughputofCell/12 << " Mbps" << endl;
}

/*------------------------------------------------MAX CQI + DELAY-----------------------------------------------*/
//Max C/I + Delay: User có MCS cao được lập lịch, số RB chia đều.
void MaxCQI(int total_TTI, int numOfUE, int max_UE_in_TTI){
    /*int numOfUE = 12;
    struct UEInformation UE[20];
    int total_TTI = 10000;
    int max_UE_in_TTI = 4;
    int subFrame_Time = 1; //1TTI = 1 SubFrame = 1ms. Trong trường hợp này để 1s để test*/
    int countTTI = 0; // SAU KHI 4 UE ĐƯỢC CẤP TBS THÌ UPDATE
    struct UEInformation UE[20];
    for(int i=0;i<numOfUE;i++){ /*CẤP MCS CHO TỪNG UE*/
        UE[i].MCS = updateMCS();
    }
    for(int i=0;i<numOfUE;i++){
        UE[i].scheduleTimes = 0;
        UE[i].Throughput = 0;
        UE[i].ResourceBlock = 0;
        UE[i].TTIDelay = 0;
        UE[i].IsScheduled = false;
        UE[i].AveMCS = 0;
    }
    vector<int> TTI[12];
    int TotalTTI[12] = {0};

    while(countTTI < total_TTI){
        //for(int i=0;i<numOfUE;i++){ /*CẤP MCS CHO TỪNG UE*/
        //    UE[i].MCS = updateMCS();
        //}
        pair<int,int> posValue[12];

        for(int i=0;i<numOfUE;i++){ // GÁN TỪNG GIÁ TRỊ MCS VÀ THỨ TỰ CỦA UE VÀO MỘT PAIR
            posValue[i] = make_pair(UE[i].MCS,i);
        }

        /*for(int i=0;i<numOfUE;i++){ // IN RA GIÁ TRỊ MCS CỦA TỪNG UE
            printf("User %d has MCS: %d\n",i+1,UE[i].MCS);
        }*/

        sort(posValue, posValue + numOfUE);// SẮP XẾP LẠI ĐỘ ƯU TIÊN CÁC UE THEO GIÁ TRỊ MCS

        /*for(int i=0;i<numOfUE;i++){ // IN RA GIÁ TRỊ CỦA UE VÀ MCS SAU KHI ĐÃ ĐƯỢC SẮP XẾP
            cout << "Value: " << posValue[i].first << ", Position: " << posValue[i].second << endl;
        }*/

        for(int i = numOfUE-1; i > numOfUE-1-max_UE_in_TTI; i--){ // CỘNG TÍCH LŨY SỐ LẦN ĐƯỢC LẬP LỊCH VÀ TBS CỦA TỪNG UE
            UE[posValue[i].second].scheduleTimes ++;// Cộng số lần lập lịch
            UE[posValue[i].second].Throughput += TBSizeArr[UE[posValue[i].second].MCS][24];
            UE[posValue[i].second].AveMCS += UE[posValue[i].second].MCS;
            UE[posValue[i].second].ResourceBlock += 25;
            UE[posValue[i].second].IsScheduled = true;
        }
        for(int i=0;i<numOfUE;i++){
            if(UE[i].IsScheduled == false){
                UE[i].TTIDelay++; // NẾU EU CHƯA ĐƯỢC LẬP LỊCH THÌ TTI DELAY TĂNG 1 ĐƠN VỊ
            }else{
                UE[i].TTIDelay = 0; // NẾU EU CHƯA ĐƯỢC LẬP LỊCH THÌ TTI DELAY VỀ 0
                UE[i].IsScheduled = false; // RESET VỀ TRẠNG THÁI CHƯA ĐƯỢC LẬP LỊCH
            }
        }

        for(int i=0;i<numOfUE;i++){
            TTI[i].push_back(UE[i].TTIDelay);
            TotalTTI[i] += UE[i].TTIDelay;
        }


        countTTI++;
    }
    cout << "----------------------"  << "MAX CQI" << "---------------------" << endl;
    float AverageThroughputofCell = 0;
    for(int i=0;i<numOfUE;i++){
        float AveThroughput;
        if(UE[i].scheduleTimes != 0){
            AveThroughput =  float(UE[i].Throughput)*8/(float(UE[i].scheduleTimes)*0.001*1000000);
        }else{
            AveThroughput =  float(UE[i].Throughput)*8/float(1*0.001*1000000);
        }
        AverageThroughputofCell += AveThroughput;
        cout << "------------------" << " UE " << i << "------------------" << endl;
        if(UE[i].scheduleTimes != 0){
            cout << "Average MCS of UE is: " << float(UE[i].AveMCS)/float(UE[i].scheduleTimes) << endl;
        }else{
            cout << "Average MCS of UE is: " << 0 << endl;
        }

        cout << "Schedule Times of UE is: " << UE[i].scheduleTimes << " Times" <<  endl;
        cout << "Number of average Resource Block during 10000 TTI is: " << float(UE[i].ResourceBlock)/float(total_TTI) << " RBs" << endl;
        cout << "Average Throughput of UE is: " << AveThroughput << " Mbps" << endl;
        cout << "Average Schedule Delay of UE is: " << float(TotalTTI[i])/float(total_TTI) << " TTIs" << endl;
        cout << "Max Schedule Delay of UE is: " << *max_element(TTI[i].begin(), TTI[i].end()) << " TTIs" << endl;
        cout << endl;
    }
    cout << "-----------------------------------------------------------------------" << endl;
    cout << "Average Througput of Cell is: " << AverageThroughputofCell/12 << " Mbps" << endl;
}

/*------------------------------------------------PROPORTIONAL FAIRNESS-----------------------------------------------*/
/*: User có MCS cao được lập lịch với điều kiện max delay lập lịch time của 1 UE không quá 40 TTI
(thời gian ue không được lập lịch không quá 40 TTI). RBs chia đều cho từng UE được lập lịch trong mỗi TTI.*/

void PF(int total_TTI, int numOfUE, int max_UE_in_TTI){
    /*int numOfUE = 12;
    struct UEInformation UE[20];
    int total_TTI = 10000;
    int max_UE_in_TTI = 4;
    int subFrame_Time = 1; //1TTI = 1 SubFrame = 1ms. Trong trường hợp này để 1s để test*/

    int countTTI = 0; // SAU KHI 4 UE ĐƯỢC CẤP TBS THÌ UPDATE
    struct UEInformation UE[20];

    //for(int i=0;i<numOfUE;i++){  //CẤP MCS CHO TỪNG UE, ĐỂ NGOÀI VÒNG WHILE LÀ CẤP CỐ ĐỊNH MCS 1 LẦN
    //        UE[i].MCS = updateMCS();
    //}

    for(int i=0;i<numOfUE;i++){// KHỞI TẠO CÁC GIÁ TRỊ BAN ĐẦU CỦA TỪNG UE BẰNG 0 HẾT
            UE[i].scheduleTimes = 0;
            UE[i].Throughput = 0;
            UE[i].TTIDelay = 0;
            UE[i].ResourceBlock = 0;
            UE[i].AveMCS = 0;
    }

    vector<int> TTI[12];
    int TotalTTI[12] = {0};

    while(countTTI < total_TTI){
        for(int i=0;i<numOfUE;i++){ //CẤP MCS CHO TỪNG UE
            UE[i].MCS = updateMCS();
        }

        for(int i=0;i<numOfUE;i++){ /*SAU MỖI LẦN LẬP LỊCH RESET TRẠNG THÁI UE VỀ FALSE HẾT*/
            UE[i].IsScheduled = false;
        }

        pair<int,int> posValue[12]; // KHỞI TẠO MỘT PAIR

        for(int i=0;i<numOfUE;i++){ // GÁN TỪNG GIÁ TRỊ MCS VÀ THỨ TỰ CỦA UE VÀO MỘT PAIR
            posValue[i] = make_pair(UE[i].MCS,i);// FIRST VALUE LÀ MCS, SECOND VALUE LÀ SỐ THỨ TỰ UE
        }

        sort(posValue, posValue + numOfUE);// SẮP XẾP LẠI ĐỘ ƯU TIÊN CỦA CÁC UE THEO GIÁ TRỊ MCS THEO THỨ TỰ TỪ BÉ ĐẾN LỚN

        //for(int i=0;i<numOfUE;i++){ /*SAU MỖI LẦN LẬP LỊCH RESET TRẠNG THÁI UE VỀ FALSE HẾT*/
        //    cout << "MCS: " << posValue[i].first << " of UE " << posValue[i].second << endl;
        //}
        //cout << endl;

        vector<int> UEposOut40;// VECTO LƯU VỊ TRÍ CỦA CÁC UE CHƯA ĐƯỢC LẬP LỊCH TRONG 40 TTI
        int countUEOutOf40 = UEposOut40.size(); // BIẾN ĐẾM SỐ LƯỢNG UE CHƯA ĐƯỢC LẬP LỊCH TRONG 40 TTI
        for(int i=0;i<numOfUE;i++){
            if(UE[i].TTIDelay >= 40){
                countUEOutOf40++;
                UEposOut40.push_back(i);
                //cout << "User " << i << " out of 40 TTIs" << endl;
            }
        }
        //cout << "count UE Out Of 40: " << countUEOutOf40 << endl;

        //switch(countUEOutOf40){
        //case 0:
        if(countUEOutOf40 == 0){
            for(int i = numOfUE-1; i > numOfUE - 1 - max_UE_in_TTI + countUEOutOf40; i--){ // CỘNG TÍCH LŨY SỐ LẦN ĐƯỢC LẬP LỊCH VÀ TBS CỦA 4 UE CÓ MCS CAO NHẤT
                UE[posValue[i].second].scheduleTimes ++;// Cộng số lần lập lịch
                UE[posValue[i].second].Throughput += TBSizeArr[UE[posValue[i].second].MCS][24];
                UE[posValue[i].second].IsScheduled = true; // SAU KHI ĐƯỢC LẬP LỊCH THÌ SẼ THÀNH TRUE
                UE[posValue[i].second].TTIDelay = 0; // KHI ĐÃ ĐƯỢC LẬP LỊCH THÌ TTI DELAY SẼ VỀ 0
                UE[posValue[i].second].ResourceBlock += 25;
                UE[posValue[i].second].AveMCS += UE[posValue[i].second].MCS;
            }
            //cout << "countUEOutOf40 == 0" << endl;
        }
        else if(countUEOutOf40 == 1){
            for(int i = numOfUE-1; i > numOfUE - 1 - max_UE_in_TTI + countUEOutOf40; i--){ // CỘNG TÍCH LŨY SỐ LẦN ĐƯỢC LẬP LỊCH VÀ TBS CỦA 4 UE CÓ MCS CAO NHẤT
                UE[posValue[i].second].scheduleTimes ++;// Cộng số lần lập lịch
                UE[posValue[i].second].Throughput += TBSizeArr[UE[posValue[i].second].MCS][24];
                UE[posValue[i].second].IsScheduled = true; // SAU KHI ĐƯỢC LẬP LỊCH THÌ SẼ THÀNH TRUE
                UE[posValue[i].second].TTIDelay = 0; // KHI ĐÃ ĐƯỢC LẬP LỊCH THÌ TTI DELAY SẼ VỀ 0
                UE[posValue[i].second].ResourceBlock += 25;
                UE[posValue[i].second].AveMCS += UE[posValue[i].second].MCS;
            }
            UE[UEposOut40[0]].scheduleTimes ++;
            UE[UEposOut40[0]].Throughput += TBSizeArr[UE[UEposOut40[0]].MCS][24];
            UE[UEposOut40[0]].IsScheduled = true;
            UE[UEposOut40[0]].TTIDelay = 0;
            UE[UEposOut40[0]].ResourceBlock += 25;
            UE[UEposOut40[0]].AveMCS += UE[UEposOut40[0]].MCS;
            UEposOut40.erase(UEposOut40.begin());// SAU KHI LẬP LỊCH CHO 1 UE CÓ TTI DELAY > 40, XÓA UE ĐÓ KHỎI VECTO VÀ TIẾN HÀNH RESET

            //cout << "countUEOutOf40 == 1" << endl;
        }
        else if(countUEOutOf40 == 2){
            for(int i = numOfUE-1; i > numOfUE - 1 - max_UE_in_TTI + countUEOutOf40; i--){ // CỘNG TÍCH LŨY SỐ LẦN ĐƯỢC LẬP LỊCH VÀ TBS CỦA 4 UE CÓ MCS CAO NHẤT
                UE[posValue[i].second].scheduleTimes ++;// Cộng số lần lập lịch
                UE[posValue[i].second].Throughput += TBSizeArr[UE[posValue[i].second].MCS][24];
                UE[posValue[i].second].IsScheduled = true;
                UE[posValue[i].second].TTIDelay = 0;
                UE[posValue[i].second].ResourceBlock += 25;
                UE[posValue[i].second].AveMCS += UE[posValue[i].second].MCS;
            }
            for(int i=0;i<countUEOutOf40;i++){
                UE[UEposOut40[i]].scheduleTimes ++;
                UE[UEposOut40[i]].Throughput += TBSizeArr[UE[UEposOut40[i]].MCS][24];
                UE[UEposOut40[i]].IsScheduled = true;
                UE[UEposOut40[i]].TTIDelay = 0;
                UE[UEposOut40[i]].ResourceBlock += 25;
                UE[UEposOut40[i]].AveMCS += UE[UEposOut40[i]].MCS;
            }
            UEposOut40.erase(UEposOut40.begin(),UEposOut40.begin()+countUEOutOf40-1);
            //cout << "countUEOutOf40 == 2" << endl;
        }
        else if(countUEOutOf40 == 3){
            for(int i = numOfUE-1; i > numOfUE - 1 - max_UE_in_TTI + countUEOutOf40; i--){ // CỘNG TÍCH LŨY SỐ LẦN ĐƯỢC LẬP LỊCH VÀ TBS CỦA 4 UE CÓ MCS CAO NHẤT
                UE[posValue[i].second].scheduleTimes ++;// Cộng số lần lập lịch
                UE[posValue[i].second].Throughput += TBSizeArr[UE[posValue[i].second].MCS][24];
                UE[posValue[i].second].IsScheduled = true;
                UE[posValue[i].second].TTIDelay = 0;
                UE[posValue[i].second].ResourceBlock += 25;
                UE[posValue[i].second].AveMCS += UE[posValue[i].second].MCS;
            }
            for(int i=0;i<countUEOutOf40;i++){
                UE[UEposOut40[i]].scheduleTimes ++;
                UE[UEposOut40[i]].Throughput += TBSizeArr[UE[UEposOut40[i]].MCS][24];
                UE[UEposOut40[i]].IsScheduled = true;
                UE[UEposOut40[i]].TTIDelay = 0;
                UE[UEposOut40[i]].ResourceBlock += 25;
                UE[UEposOut40[i]].AveMCS += UE[UEposOut40[i]].MCS;
            }
            UEposOut40.erase(UEposOut40.begin(),UEposOut40.begin()+countUEOutOf40-1);
            //cout << "countUEOutOf40 == 3" << endl;
        }
        else{// Trường hợp 4,5,6,7,8 người không được lập lịch
            for(int i=0;i<max_UE_in_TTI;i++){
                UE[UEposOut40[i]].scheduleTimes ++;
                UE[UEposOut40[i]].Throughput += TBSizeArr[UE[UEposOut40[i]].MCS][24];
                UE[UEposOut40[i]].IsScheduled = true;
                UE[UEposOut40[i]].TTIDelay = 0;
                UE[UEposOut40[i]].ResourceBlock += 25;
                UE[UEposOut40[i]].AveMCS += UE[UEposOut40[i]].MCS;
            }
            UEposOut40.erase(UEposOut40.begin(),UEposOut40.begin()+3);
            //cout << "countUEOutOf40 >= 4" << endl;
        }
        for(int i=0;i<numOfUE;i++){// NẾU NHƯ UE CHƯA ĐƯỢC LẬP LỊCH THÌ TTI DELAY TĂNG THÊM 1 ĐƠN VỊ
            if(UE[i].IsScheduled == false){
                UE[i].TTIDelay++;
            }
        }
        for(int i=0;i<numOfUE;i++){
            TTI[i].push_back(UE[i].TTIDelay);
            TotalTTI[i] += UE[i].TTIDelay;
        }

        countTTI++;// SAU KHI 4UE ĐƯỢC LẬP LỊCH THÌ TĂNG CHỈ SỐ TTI CHO ĐẾN KHI ĐỦ 10000 THÌ DỪNG
    }
    float AverageThroughputofCell = 0;
    cout << "----------------------"  << " PROPORTIONAL FAIRNESS " << "---------------------" << endl;
    for(int i=0;i<numOfUE;i++){
        float AveThrougput =  float(UE[i].Throughput)*8/(float(UE[i].scheduleTimes)*0.001*1000000);
        AverageThroughputofCell += AveThrougput;
        cout << "----------------------" << " UE " << i << " ----------------------" << endl;
        cout << "Average MCS of UE: " << i << " is: " <<  float(UE[i].AveMCS)/float(UE[i].scheduleTimes) << endl;
        cout << "Schedule Times of UE " << i << " is: " << UE[i].scheduleTimes << " Times" << endl;
        cout << "Number of average Resource Block during 10000 TTI is: " << float(UE[i].ResourceBlock)/float(total_TTI) << " RBs" << endl;
        cout << "Average Throughput of UE " << i << " is: " << AveThrougput << " Mbps" << endl;
        cout << "Average Schedule Delay of UE is: " << float(TotalTTI[i])/float(total_TTI) << " TTIs" << endl;
        cout << "Max Schedule Delay of UE is: " << *max_element(TTI[i].begin(), TTI[i].end()) << " TTIs" << endl;
        cout << endl;
    }
    cout << "-----------------------------------------------------------------------" << endl;
    cout << "Average Througput of Cell is: " << AverageThroughputofCell/12 << " Mbps" << endl;
}

// int TBSizeArr[MAX_MCS_INDEX][MAX_RB]
int main()
{
    int numOfUE = 12;
    struct UEInformation UE[20];
    int total_TTI = 10000;
    int max_UE_in_TTI = 4;
    int subFrame_Time = 1; //1TTI = 1 SubFrame = 1ms. Trong trường hợp này để 1s để test

    /*for(int i=0;i<numOfUE;i++){
        UE[i].MCS = rand() % 27; // Hàm random, phân bổ MCS cho từng user
    }*/

    /*for(int i=0;i<numOfUE;i++){
        printf("User %d has MCS: %d\n",i+1,UE[i].MCS);
    }*/

    /* 1 TTI = 1 SubFrame = 1 Resource Grid = 100 Resource Blocks. 1 TTI max 4UE => Theo Round Robin chia đều Resource Block cho
    UE nên mỗi UE trong 1 TTI sẽ có 25 Resource Blocks */

    // ROUND ROBIN
    //RoundRobin(total_TTI,numOfUE,max_UE_in_TTI);

    // MAX C/I + DELAY
    MaxCQI(total_TTI,numOfUE,max_UE_in_TTI);

    //PROPORTIONAL FAIRNESS
    //PF(total_TTI,numOfUE,max_UE_in_TTI);
    return 0;
}
